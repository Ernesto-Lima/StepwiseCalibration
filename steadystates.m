%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%Begin steadystates.m%This file solves the system of equations when they are set to 0%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%Model Variables:%T-tumor%Im-immune response%V-vasculature quality%Equations: %        dT/dt = g_T*T - u_T*Im*T    %        dIm/dt = g_I*Im*(1 - Im) + a_V*V*(1 - Im)%        dV/dt = g_V*V*(1 - V) + a_I*Im*(1 - V) - u_V*V*T%        dV/dt = g_V*(1 - V) + a_I*Im*(1 - V) - u_V*V*T%Note two ways for V eqn%g_T   = T growth rate%u_T = T removal by Im%g_I  = Im proliferation%a_V = Im recruitment success by V%g_V = V growth rate%a_I = V benefit from Im%u_V  = V damage by T%3 equations and 7 total parameters%''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''%Initializing workspace clear all; close all; format long; set(0,'DefaultAxesFontName', 'Arial') set(0,'DefaultAxesFontSize', 14) %''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''%Defining parameters and their values  %Controlparams = [0.15 0.5 0.002 0.0001 0.002 0.2 0.04e-3];% params = [0.15 0.02 0.15 0.02 0.2 0.2 0.04e-3]; g_T = params(1); u_T = params(2); g_I = params(3); a_V = params(4); g_V = params(5); a_I = params(6);  u_V = params(7); syms T Im VFs = [g_T*T - u_T*Im*T == 0, ...      g_I*Im*(1 - Im) + a_V*V*(1 - Im) == 0, ...      g_V*(1 - V) + a_I*Im*(1 - V) - u_V*V*T == 0];%       g_V*V*(1 - V) + a_I*Im*(1 - V) - u_V*V*T == 0];solve(Fs)[im,t,v] = solve(Fs);NumberOfSolutions = size(t,1)[rows,cols] = find(imag([t,im,v])~=0);b = unique(rows);t(b) = []; im(b) = []; v(b) = [];[rows,cols] = find([t,im,v]<0);a = unique(rows);t(a) = []; im(a) = []; v(a) = [];NumberOfBiologicalSolutions = NumberOfSolutions - size(b,1)disp('The solutions are [t,im,v] = ')eval([t,im,v])syms T Im VF = [g_T*T - u_T*Im*T, ...     g_I*Im*(1 - Im) + a_V*V*(1 - Im), ...     g_V*(1 - V) + a_I*Im*(1 - V) - u_V*V*T];%      g_V*(1 - V) + a_I*Im*(1 - V) - u_V*V*T];disp('The Jacobian is ')J = jacobian(F,[T,Im,V])for jj = 1:size(t,1)    clear C Im V    Jeval = zeros(size(J));    T = t(jj); Im = im(jj); V = v(jj);    for ii = 1:numel(J)        Jeval(ii) = eval(J(ii));    end     jj    eig(Jeval)end  %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%end of file