%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%Begin steadystates.m%This file solves the system of equations when they are set to 0%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%Model Variables:%T-tumor%V-vasculature quality%Equations: %Equations: %        dC/dt = g_C*C - u_C*C*I%        dI/dt = g_I*I*(C - I) + a_V*V*(C - I) - b_I*I*C%        dV/dt = g_V*(C + I - V) - u_V*V*C%3 equations and 7 total parameters%''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''%Initializing workspace clear all; close all;clc format long; set(0,'DefaultAxesFontName', 'Arial') set(0,'DefaultAxesFontSize', 14) %''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''%Defining parameters and their values  %Controlparams = [0.25 2.47 0.55 0.16 0.81 0.36 3.28]; %E0771 control% params = [0.25 9.89 1.88 0.49 0.81 0.07 3.28 0.21 0.07]; %E0771 treated% params = [0.25 100.1 3.09 0.49 0.01 0.00 3.28]; %E0771 treatedparams = [0.30 2.70 0.25 0.75 0.21 0.00 1.76]; %MC38 control% params = [0.30 3.45 3.43 0.10 0.21 0.35 1.76 2.89 0.10]; %MC38 responders% params = [0.30 0.07 3.43 0.10 0.21 0.05 1.76 2.19 0.10]; %MC38 nonresponders, uc g_C = params(1); u_C = params(2); g_I = params(3); a_V = params(4); b_I = params(5); g_V = params(6); u_V = params(7); syms C I VFs = [g_C*C - u_C*C*I == 0, ...      g_I*I*(C - I) + a_V*V*(C - I) - b_I*I*C == 0,...      g_V*(C + I - V) - u_V*V*C == 0];solve(Fs)[c,i,v] = solve(Fs);NumberOfSolutions = numel(c)[rows,cols] = find(imag([c,i,v])~=0);b = unique(rows);c(b) = []; i(b) = []; v(b) = [];[rows,cols] = find([c,i,v]<0);a = unique(rows);c(a) = []; i(a) = []; v(a) = [];NumberOfBiologicalSolutions = NumberOfSolutions - numel(b) - numel(a)disp('The solutions are [c,i,v] = ')eval([c,i,v])syms C I VF = [g_C*C - u_C*C*I, ...      g_I*I*(C - I) + a_V*V*(C - I) - b_I*I*C,...      g_V*(C + I - V) - u_V*V*C];J = jacobian(F,[C,I,V])for jj = 1:size(c,1)    clear C I V    Jeval = zeros(size(J));    C = c(jj); I = i(jj); V = v(jj);    for ii = 1:numel(J)        Jeval(ii) = eval(J(ii));    end     jj    eig(Jeval)end  %%params = [0.25 2.47 0.55 0.16 0.81 0.36 3.28]; %E0771 controlparams = [0.25 9.89 1.88 0.49 0.81 0.07 3.28 0.21 0.07]; %E0771 treatedparams = [0.25 10.1 3.09 0.49 0.81 0.07 3.28]; %E0771 treated% params = [0.30 2.70 0.25 0.75 0.21 0.00 1.76]; %MC38 control% params = [0.30 3.45 3.43 0.10 0.21 0.35 1.76 2.89 0.10]; %MC38 responders g_C = params(1); u_C = params(2); g_I = params(3); a_V = params(4); b_I = params(5); g_V = params(6); u_V = params(7); syms C IFs = [g_C*C - u_C*C*I == 0, ...      g_I*I*(C - I) - b_I*I*C == 0];solve(Fs)[c,i] = solve(Fs);NumberOfSolutions = numel(c)[rows,cols] = find(imag([c,i])~=0);b = unique(rows);c(b) = []; i(b) = [];[rows,cols] = find([c,i]<0);a = unique(rows);c(a) = []; i(a) = [];NumberOfBiologicalSolutions = NumberOfSolutions - numel(b) - numel(a)disp('The solutions are [c,i] = ')eval([c,i])syms C IF = [g_C*C - u_C*C*I, ...      g_I*I*(C - I) - b_I*I*C];J = jacobian(F,[C,I])for jj = 1:size(c,1)    clear C I    Jeval = zeros(size(J));    C = c(jj); I = i(jj);    for ii = 1:numel(J)        Jeval(ii) = eval(J(ii));    end     jj    eig(Jeval)end %~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%end of file